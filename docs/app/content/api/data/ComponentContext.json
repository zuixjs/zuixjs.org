[{"tags":[],"description":{"full":"Copyright 2015-2018 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","summary":"Copyright 2015-2018 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix","body":"Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":17},{"tags":[{"type":"author","string":"Generoso Martello <generoso@martello.com>"}],"description":{"full":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","summary":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":18,"codeStart":27,"code":"'use strict';\n\nconst _log =\n    require('../helpers/Logger')('ComponentContext.js');\nconst _optionAttributes =\n    require('./OptionAttributes')();\nconst z$ =\n    require('../helpers/ZxQuery');\nconst util =\n    require('../helpers/Util');\n\n// Custom objects definition used to generate JsDoc","ctx":false},{"tags":[{"type":"callback","string":"ContextControllerHandler"},{"type":"param","string":"{ContextController} cp The component controller object.","name":"cp","description":"The component controller object.","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"this","string":"{ContextController}"}],"description":{"full":"This function is called after the component is loaded\nand it is used to initialize its controller.","summary":"This function is called after the component is loaded\nand it is used to initialize its controller.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":40,"codeStart":48},{"tags":[{"type":"callback","string":"EventCallback"},{"type":"param","string":"{string} event Event name.","name":"event","description":"Event name.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object} data Event data.","name":"data","description":"Event data.","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"this","string":"{ZxQuery}"}],"description":{"full":"Callback function triggered when an event registered with the `on` method occurs.","summary":"Callback function triggered when an event registered with the `on` method occurs.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":49,"codeStart":58,"code":"// TODO: convert all 'this.<field>' to 'let' variables","ctx":false},{"tags":[{"type":"type","string":"{Zuix} *","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":60,"codeStart":61,"code":"let zuix = null;","ctx":{"type":"declaration","name":"zuix","value":"null","string":"zuix"}},{"tags":[{"type":"param","string":"{Zuix} zuixInstance","name":"zuixInstance","description":"","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ContextOptions} options The context options.","name":"options","description":"The context options.","types":["ContextOptions"],"typesDescription":"<a href=\"ContextOptions.html\">ContextOptions</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} [eventCallback] Event routing callback.","name":"[eventCallback]","description":"Event routing callback.","types":["function"],"typesDescription":"<code>function</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext} The component context instance.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The component context instance."},{"type":"constructor","string":""}],"description":{"full":"The component context object.","summary":"The component context object.","body":""},"isPrivate":false,"isConstructor":true,"isClass":false,"isEvent":false,"ignore":false,"line":63,"codeStart":72,"code":"function ComponentContext(zuixInstance, options, eventCallback) {\n    zuix = zuixInstance;\n    this._options = null;\n    this.contextId = (options == null || options.contextId == null) ? null : options.contextId;\n    this.componentId = null;\n    this.trigger = function(context, eventPath, eventValue) {\n        if (typeof eventCallback === 'function') {\n            eventCallback(context, eventPath, eventValue);\n        }\n    };","ctx":{"type":"constructor","name":"ComponentContext","string":"ComponentContext()"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":83,"codeStart":84,"code":"this._container = null;","ctx":{"type":"property","receiver":"this","name":"_container","value":"null","string":"this._container"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":86,"codeStart":87,"code":"this._model = null;","ctx":{"type":"property","receiver":"this","name":"_model","value":"null","string":"this._model"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":88,"codeStart":89,"code":"this._view = null;","ctx":{"type":"property","receiver":"this","name":"_view","value":"null","string":"this._view"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":90,"codeStart":91,"code":"this._css = null;","ctx":{"type":"property","receiver":"this","name":"_css","value":"null","string":"this._css"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":92,"codeStart":93,"code":"this._style = null;","ctx":{"type":"property","receiver":"this","name":"_style","value":"null","string":"this._style"}},{"tags":[{"type":"protected","string":"","visibility":"protected"},{"type":"type","string":"{ContextControllerHandler}","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":94,"codeStart":98,"code":"this._controller = null;","ctx":{"type":"property","receiver":"this","name":"_controller","value":"null","string":"this._controller"}},{"tags":[{"type":"function","string":"behavior"},{"type":"param","string":"handler_fn {function}","name":"handler_fn","description":"{function}","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false}],"description":{"full":"Define the local behavior handler for this context instance only.\nAny global behavior matching the same `componentId` will be overridden.","summary":"Define the local behavior handler for this context instance only.\nAny global behavior matching the same `componentId` will be overridden.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":100,"codeStart":107,"code":"this.behavior = null;","ctx":{"type":"property","receiver":"this","name":"behavior","value":"null","string":"this.behavior"}},{"tags":[{"type":"package","string":""}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":109,"codeStart":110,"code":"this._eventMap = [];","ctx":{"type":"property","receiver":"this","name":"_eventMap","value":"[]","string":"this._eventMap"}},{"tags":[{"type":"package","string":""}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":111,"codeStart":112,"code":"this._behaviorMap = [];","ctx":{"type":"property","receiver":"this","name":"_behaviorMap","value":"[]","string":"this._behaviorMap"}},{"tags":[{"type":"package","string":""},{"type":"type","string":"{ContextController}","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":114,"codeStart":118,"code":"this._c = null;\n\nthis.options(options);\n\nreturn this;\n}","ctx":{"type":"property","receiver":"this","name":"_c","value":"null","string":"this._c"}},{"tags":[{"type":"param","string":"{Element} [container] The container element.","name":"[container]","description":"The container element.","types":["Element"],"typesDescription":"<code>Element</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext|Element}","types":["ComponentContext","Element"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>|<code>Element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the container element of the component.\nReturns the current container element if no\nargument is passed, the {ComponentContext} itself\notherwise.","summary":"Gets/Sets the container element of the component.\nReturns the current container element if no\nargument is passed, the {ComponentContext} itself\notherwise.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":124,"codeStart":133,"code":"ComponentContext.prototype.container = function(container) {\n    // TODO: should automatically re-attach view to the new parent?\n    if (container == null) return this._container;\n    else if (container instanceof z$.ZxQuery) {\n        container = container.get();\n    }\n    this._container = container;\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"container","string":"ComponentContext.prototype.container()"}},{"tags":[{"type":"param","string":"{Element|string|undefined} [view] The *HTML* string or element of the view.","name":"[view]","description":"The *HTML* string or element of the view.","types":["Element","string"],"typesDescription":"<code>Element</code>|<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext|Element}","types":["ComponentContext","Element"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>|<code>Element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the view element of the component.\nIf an *HTML* string is passed, then the view element\nwill be a new `div` wrapping the given markup.\nReturns the current view element if no\nargument is passed, the {ComponentContext} itself otherwise.","summary":"Gets/Sets the view element of the component.\nIf an *HTML* string is passed, then the view element\nwill be a new `div` wrapping the given markup.\nReturns the current view element if no\nargument is passed, the {ComponentContext} itself otherwise.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":143,"codeStart":153,"code":"ComponentContext.prototype.view = function(view) {\n    if (typeof view === 'undefined') return this._view;\n    else if (view instanceof z$.ZxQuery) {\n        view = view.get();\n    }\n\n    _log.t(this.componentId, 'view:attach', 'timer:view:start');\n    if (typeof view === 'string') {\n        // load view from HTML source\n\n        // trigger `html:parse` hook before assigning content to the view\n        const hookData = {content: view};\n        this.trigger(this, 'html:parse', hookData);\n        view = hookData.content;\n\n        const viewDiv = z$.wrapElement('div', view);\n        if (viewDiv.firstElementChild != null) {\n            // remove data-ui-view attribute from template if present on root node\n            if (viewDiv.firstElementChild.getAttribute(_optionAttributes.dataUiView) != null) {\n                if (viewDiv.children.length === 1) {\n                    view = viewDiv.firstElementChild.innerHTML;\n                }\n            } else view = viewDiv.innerHTML;\n        }\n        if (this._container != null) {\n            // append view content to the container\n            this._view = this._container;\n            this._view.innerHTML += view;\n        } else {\n            if (this._view != null) {\n                this._view.innerHTML = view;\n            } else this._view = viewDiv;\n        }\n\n        // Run embedded scripts\n        z$(this._view).find('script').each(function(i, el) {\n            if (this.attr('zuix-loaded') !== 'true') {\n                this.attr('zuix-loaded', 'true');","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"view","string":"ComponentContext.prototype.view()"}},{"tags":[],"description":{"full":"if (el.src != null && el.src.length > 0) {\n                    var clonedScript = document.createElement('script');\n                    clonedScript.setAttribute('zuix-loaded', 'true');\n                    clonedScript.onload = function () {\n                        // TODO: ...\n                    };\n                    if (!util.isNoU(this.type) && this.type.length > 0)\n                        clonedScript.type = this.type;\n                    if (!util.isNoU(this.text) && this.text.length > 0)\n                        clonedScript.text = this.text;\n                    if (!util.isNoU(this.src) && this.src.length > 0)\n                        clonedScript.src = this.src;\n                    this.get().parentNode.insertBefore(clonedScript, this.get());\n                } else","summary":"if (el.src != null && el.src.length > 0) {\n                    var clonedScript = document.createElement('script');\n                    clonedScript.setAttribute('zuix-loaded', 'true');\n                    clonedScript.onload = function () {\n                        // TODO: ...\n                    };\n                    if (!util.isNoU(this.type) && this.type.length > 0)\n                        clonedScript.type = this.type;\n                    if (!util.isNoU(this.text) && this.text.length > 0)\n                        clonedScript.text = this.text;\n                    if (!util.isNoU(this.src) && this.src.length > 0)\n                        clonedScript.src = this.src;\n                    this.get().parentNode.insertBefore(clonedScript, this.get());\n                } else","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":191,"codeStart":205,"code":"(eval).call(window, el.innerHTML);\n            }\n        });\n\n        // trigger `view:process` hook when the view is ready to be processed\n        this.trigger(this, 'view:process', z$(this._view));\n    } else {\n        if (view instanceof z$.ZxQuery) {\n            view = view.get();\n        }\n        // load inline view\n        if (this._container != null) {\n            this._view = z$.wrapElement('div', view.outerHTML).firstElementChild;\n            // remove data-ui-view attribute if present on root node\n            this._view.removeAttribute(_optionAttributes.dataUiView);\n            this._container.appendChild(this._view);\n            this._view = this._container;\n        } else this._view = view;\n    }\n\n    const v = z$(this._view);\n    if (this._options.css === false) {\n        // disable local css styling for this instance\n        v.addClass('zuix-css-ignore');\n    } else {\n        // enable local css styling\n        v.removeClass('zuix-css-ignore');\n    }\n    // Disable loading of nested components until the component is ready\n    v.find('['+_optionAttributes.dataUiLoad+']').each(function(i, v) {\n        this.attr(_optionAttributes.dataUiLoaded, 'false');\n    });\n\n    this.modelToView();\n\n    _log.t(this.componentId, 'view:attach', 'timer:view:stop');\n    return this;\n};","ctx":false},{"tags":[{"type":"example","string":"<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\nctx.style(\"p { font-size: 120%; } .hidden { display: 'none'; }\");\n</code></pre>"},{"type":"param","string":"{string|Element|undefined} [css] The CSS string or element.","name":"[css]","description":"The CSS string or element.","types":["string","Element"],"typesDescription":"<code>string</code>|<code>Element</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext|Element}","types":["ComponentContext","Element"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>|<code>Element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the view style of the component.\nThe `css` argument can be a string containing all\nstyles definitions or a reference to a style\nelement. When a string is passed the css\nis linked to the `componentId` attribute so that\nits styles will be only applied to the component\ncontainer.\nIf no argument is given, then the current style\nelement is returned.","summary":"Gets/Sets the view style of the component.\nThe `css` argument can be a string containing all\nstyles definitions or a reference to a style\nelement. When a string is passed the css\nis linked to the `componentId` attribute so that\nits styles will be only applied to the component\ncontainer.\nIf no argument is given, then the current style\nelement is returned.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":244,"codeStart":264,"code":"ComponentContext.prototype.style = function(css) {\n    if (typeof css === 'undefined') return this._style;\n    _log.t(this.componentId, 'view:style', 'timer:view:start');\n    if (css == null || css instanceof Element) {\n        this._css = (css instanceof Element) ? css.innerText : css;\n        this._style = z$.appendCss(css, this._style, this.componentId);\n    } else if (typeof css === 'string') {\n        // store original unparsed css (might be useful for debugging)\n        this._css = css;\n\n        // trigger `css:parse` hook before assigning content to the view\n        const hookData = {content: css};\n        this.trigger(this, 'css:parse', hookData);\n        css = hookData.content;\n\n        // nest the CSS inside [data-ui-component='<componentId>']\n        // so that the style is only applied to this component type\n        css = z$.wrapCss('['+_optionAttributes.dataUiComponent+'=\"' + this.componentId + '\"]:not(.zuix-css-ignore)', css);\n\n        // output css\n        this._style = z$.appendCss(css, this._style, this.componentId);\n    }\n    // TODO: should throw error if ```css``` is not a valid type\n    _log.t(this.componentId, 'view:style', 'timer:view:stop');\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"style","string":"ComponentContext.prototype.style()"}},{"tags":[{"type":"example","string":"<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\nctx.model({\n     title: 'Thoughts',\n     message: 'She stared through the window at the stars.'\n });\n</code></pre>"},{"type":"param","string":"{object|undefined} [model] The model object.","name":"[model]","description":"The model object.","types":["object"],"typesDescription":"<code>object</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext|object}","types":["ComponentContext","object"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>|<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the data model of the component.","summary":"Gets/Sets the data model of the component.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":290,"codeStart":305,"code":"ComponentContext.prototype.model = function(model) {\n    if (typeof model === 'undefined') return this._model;\n    else this._model = model; // model can be set to null\n    this.modelToView();\n    // call controller `update` method when model is updated\n    if (this._c != null && util.isFunction(this._c.update)) {\n        this._c.update.call(this._c);\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"model","string":"ComponentContext.prototype.model()"}},{"tags":[{"type":"example","string":"<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\nctx.controller(function(cp) {\n     cp.create = function() {\n          cp.view().html('Hello World!');\n     };\n     // ...\n });\n</code></pre>"},{"type":"param","string":"{ContextControllerHandler|undefined} [controller] The handler function of the controller.","name":"[controller]","description":"The handler function of the controller.","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext|ContextControllerHandler}","types":["ComponentContext","ContextControllerHandler"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>|<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the handler function of the controller.","summary":"Gets/Sets the handler function of the controller.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":315,"codeStart":332,"code":"ComponentContext.prototype.controller = function(controller) {\n    if (typeof controller === 'undefined') return this._controller;\n    // TODO: should dispose previous context controller first\n    else this._controller = controller; // can be null\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"controller","string":"ComponentContext.prototype.controller()"}},{"tags":[{"type":"param","string":"{ContextOptions|undefined} options The JSON options object.","name":"options","description":"The JSON options object.","types":["ContextOptions"],"typesDescription":"<a href=\"ContextOptions.html\">ContextOptions</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext|object}","types":["ComponentContext","object"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>|<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the component options.","summary":"Gets/Sets the component options.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":339,"codeStart":345,"code":"ComponentContext.prototype.options = function(options) {\n    if (options == null) {\n        return this._options;\n    }\n    const o = this._options = this._options || {};\n    z$.each(options, function(k, v) {\n        o[k] = v;\n    });\n    if (o.componentId != null) {\n        this.componentId = o.componentId;\n    }\n    this.container(o.container);\n    this.view(o.view);\n    if (typeof o.css !== 'undefined') {\n        this.style(o.css);\n    }\n    this.controller(o.controller);\n    this.model(o.model);\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"options","string":"ComponentContext.prototype.options()"}},{"tags":[{"type":"example","string":"<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\nctx.on('item:share', function(evt, data) { ... });\n</code></pre>"},{"type":"param","string":"{string} eventPath The event path.","name":"eventPath","description":"The event path.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{EventCallback} eventHandler The event handling function.","name":"eventHandler","description":"The event handling function.","types":["EventCallback"],"typesDescription":"<a href=\"EventCallback.html\">EventCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext} The ```{ComponentContext}``` object itself.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{ComponentContext}``` object itself."}],"description":{"full":"Listens for a component event.","summary":"Listens for a component event.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":366,"codeStart":379,"code":"ComponentContext.prototype.on = function(eventPath, eventHandler) {\n    // TODO: throw error if _c (controller instance) is not yet ready\n    this._c.on(eventPath, eventHandler);\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"on","string":"ComponentContext.prototype.on()"}},{"tags":[{"type":"example","string":"<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\n// loads 'path/to/component_name.css' by default\nctx.loadCss();\n// or loads the view css with options\nctx.loadCss({\n    path: 'url/of/style/file.css',\n    success: function() { ... },\n    error: function(err) { ... },\n    then: function() { ... }\n});\n</code></pre>"},{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{object} [options] The options object.","name":"[options]","description":"The options object.","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} [enableCaching] Enable HTTP","name":"[enableCaching]","description":"Enable HTTP","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext} The ```{ComponentContext}``` object itself.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{ComponentContext}``` object itself."}],"description":{"full":"Loads the `.css` file and replace the view style of the component.\nIf no `options.path` is specified, it will try to load\nthe file with the same base-name as the `componentId`.","summary":"Loads the `.css` file and replace the view style of the component.\nIf no `options.path` is specified, it will try to load\nthe file with the same base-name as the `componentId`.","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":384,"codeStart":408,"code":"ComponentContext.prototype.loadCss = function(options, enableCaching) {\n    const context = this;\n    if (util.isNoU(options)) options = {};\n    if (!util.isNoU(options.caching)) {\n        enableCaching = options.caching;\n    }\n    let cssPath = context.componentId + '.css';\n    if (!util.isNoU(options.path)) {\n        cssPath = options.path;\n    }\n    if (!enableCaching) {\n        cssPath += '?'+new Date().getTime();\n    }\n    z$.ajax({\n        url: zuix.getResourcePath(cssPath),\n        success: function(viewCss) {\n            context.style(viewCss);\n            if (util.isFunction(options.success)) {\n                (options.success).call(context, viewCss);\n            }\n        },\n        error: function(err) {\n            _log.e(err, context);\n            if (util.isFunction(options.error)) {\n                (options.error).call(context, err);\n            }\n        },\n        then: function() {\n            if (util.isFunction(options.then)) {\n                (options.then).call(context);\n            }\n        }\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"loadCss","string":"ComponentContext.prototype.loadCss()"}},{"tags":[{"type":"example","string":"<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\n// loads 'path/to/component_name.html' by default\nctx.loadHtml();\n// or loads the view html with options\nctx.loadHtml({\n    path: 'url/of/view/file.html',\n    success: function() { ... },\n    error: function(err) { ... },\n    then: function() { ... }\n});\n</code></pre>"},{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{object} [options] The options object.","name":"[options]","description":"The options object.","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} [enableCaching] Enable HTTP caching","name":"[enableCaching]","description":"Enable HTTP caching","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext} The ```{ComponentContext}``` object itself.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{ComponentContext}``` object itself."}],"description":{"full":"Loads the `.html` file and replace the view markup code of the component.\nIf no `options.path` is specified, it will try to load the\nfile with the same base-name as the `componentId`.","summary":"Loads the `.html` file and replace the view markup code of the component.\nIf no `options.path` is specified, it will try to load the\nfile with the same base-name as the `componentId`.","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":443,"codeStart":467,"code":"ComponentContext.prototype.loadHtml = function(options, enableCaching) {\n    const context = this;\n    let htmlPath = context.componentId;\n    if (util.isNoU(options)) options = {};\n    if (!util.isNoU(options.caching)) {\n        enableCaching = options.caching;\n    }\n    if (!util.isNoU(options.path)) {\n        htmlPath = options.path;\n    }\n    // cache inline \"data-ui-view\" html\n    let inlineViews = zuix.store('zuix.inlineViews');\n    if (inlineViews == null) {\n        inlineViews = [];\n        zuix.store('zuix.inlineViews', inlineViews);\n    }\n    if (inlineViews[htmlPath] != null) {\n        context.view(inlineViews[htmlPath]);\n        if (util.isFunction(options.success)) {\n            (options.success).call(context, inlineViews[htmlPath]);\n        }\n        if (util.isFunction(options.then)) {\n            (options.then).call(context);\n        }\n    } else {\n        // TODO: check if view caching is working in this case too\n        const inlineView = z$().find('[' + _optionAttributes.dataUiView + '=\"' + htmlPath + '\"]:not([' + _optionAttributes.dataUiComponent + '*=\"\"])');\n        if (inlineView.length() > 0) {\n            const inlineElement = inlineView.get(0);\n            inlineViews[htmlPath] = inlineElement.innerHTML;\n            if (context.view() === inlineElement || (context.container() != null && context.container().contains(inlineElement))) {\n                // TODO: test this case better (or finally integrate some unit testing =))\n                // TODO: \"html:parse\" will not fire in this case (and this is the wanted behavior)\n                inlineView.attr(_optionAttributes.dataUiView, null);\n                context._view = inlineElement;\n                // trigger `view:process` hook\n                this.trigger(this, 'view:process', z$(context.view()));\n            } else {\n                context.view(inlineElement.innerHTML);\n            }\n            if (util.isFunction(options.success)) {\n                (options.success).call(context, inlineElement.innerHTML);\n            }\n            if (util.isFunction(options.then)) {\n                (options.then).call(context);\n            }\n        } else {\n            const cext = util.isNoU(options.cext) ? '.html' : options.cext;\n            if (htmlPath == context.componentId) {\n                htmlPath += cext + (!enableCaching ? '?' + new Date().getTime() : '');\n            }\n            z$.ajax({\n                url: zuix.getResourcePath(htmlPath),\n                success: function(viewHtml) {\n                    context.view(viewHtml);\n                    if (util.isFunction(options.success)) {\n                        (options.success).call(context, viewHtml);\n                    }\n                },\n                error: function(err) {\n                    _log.e(err, context);\n                    if (util.isFunction(options.error)) {\n                        (options.error).call(context, err);\n                    }\n                },\n                then: function() {\n                    if (util.isFunction(options.then)) {\n                        (options.then).call(context);\n                    }\n                }\n            });\n        }\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"loadHtml","string":"ComponentContext.prototype.loadHtml()"}},{"tags":[{"type":"return","string":"{ComponentContext} The ```{ComponentContext}``` object itself.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{ComponentContext}``` object itself."}],"description":{"full":"Creates the data model starting from ```data-ui-field```\nelements declared in the component view.","summary":"Creates the data model starting from ```data-ui-field```\nelements declared in the component view.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":542,"codeStart":548,"code":"ComponentContext.prototype.viewToModel = function() {\n    _log.t(this.componentId, 'view:model', 'timer:vm:start');\n    const _t = this;\n    this._model = {};\n    // create data model from inline view fields\n    z$(this._view).find('['+_optionAttributes.dataUiField+']').each(function(i, el) {\n        // TODO: this is not so clean\n        if (this.parent('pre,code').length() > 0) {\n            return true;\n        }\n        const name = this.attr(_optionAttributes.dataUiField);\n        const value =\n            // TODO: this is a work around for IE where \"el.innerHTML\" is lost after view replacing\n            (!util.isNoU(el.innerHTML) && util.isIE())\n                ? el.cloneNode(true) : el;\n        // dotted field path\n        if (name.indexOf('.')>0) {\n            const path = name.split('.');\n            let cur = _t._model;\n            for (let p = 0; p < path.length - 1; p++) {\n                if (typeof cur[path[p]] === 'undefined') {\n                    cur[path[p]] = {};\n                }\n                cur = cur[path[p]];\n            }\n            cur[path[path.length - 1]] = value;\n        } else _t._model[name] = value;\n    });\n    _log.t(this.componentId, 'view:model', 'timer:vm:stop');\n    return this;\n};","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"viewToModel","string":"ComponentContext.prototype.viewToModel()"}},{"tags":[{"type":"return","string":"{ComponentContext} The ```{ComponentContext}``` object itself.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{ComponentContext}``` object itself."}],"description":{"full":"Copies values from the data model to the ```data-ui-field```\nelements declared in the component view.","summary":"Copies values from the data model to the ```data-ui-field```\nelements declared in the component view.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":579,"codeStart":585,"code":"ComponentContext.prototype.modelToView = function() {\n    _log.t(this.componentId, 'model:view', 'timer:mv:start');\n    if (this._view != null && this._model != null) {\n        const _t = this;\n        z$(this._view).find('['+_optionAttributes.dataUiField+']').each(function(i, el) {\n            if (this.parent('pre,code').length() > 0) {\n                return true;\n            }\n            let boundField = this.attr(_optionAttributes.dataBindTo);\n            if (boundField == null) {\n                boundField = this.attr(_optionAttributes.dataUiField);\n            }\n            if (typeof _t._model === 'function') {\n                (_t._model).call(z$(_t._view), this, boundField);\n            } else {\n                const boundData = util.propertyFromPath(_t._model, boundField);\n                if (typeof boundData === 'function') {\n                    (boundData).call(z$(_t._view), this, boundField);\n                } else if (boundData != null) {\n                    // try to guess target property\n                    switch (el.tagName.toLowerCase()) {\n                        // TODO: complete binding cases\n                        case 'img':\n                            el.src = (!util.isNoU(boundData.src) ? boundData.src :\n                                (!util.isNoU(boundData.innerHTML) ? boundData.innerHTML : boundData));\n                            if (boundData.alt) el.alt = boundData.alt;\n                            break;\n                        case 'a':\n                            el.href = (!util.isNoU(boundData.href) ? boundData.getAttribute('href'):\n                                (!util.isNoU(boundData.innerHTML) ? boundData.innerHTML : boundData));\n                            if (boundData.title) el.title = boundData.title;\n                            if (!util.isNoU(boundData.href) && !util.isNoU(boundData.innerHTML) && boundData.innerHTML.trim() !== '') {\n                                el.innerHTML = boundData.innerHTML;\n                            }\n                            break;\n                        case 'input':\n                            el.value = (!util.isNoU(boundData.value) ? boundData.value :\n                                (!util.isNoU(boundData.innerHTML) ? boundData.innerHTML : boundData));\n                            break;\n                        default:\n                            el.innerHTML = (!util.isNoU(boundData.innerHTML) ? boundData.innerHTML : boundData);\n                            if (boundData.attributes != null) {\n                                for (let i = 0; i < boundData.attributes.length; i++) {\n                                    const attr = boundData.attributes[i];\n                                    if (attr.specified && attr.name !== _optionAttributes.dataUiField) {\n                                        if (attr.value[0] === '+' && el.hasAttribute(attr.name)) {\n                                            attr.value = el.getAttribute(attr.name) + ' ' + attr.value.substring(1);\n                                        }\n                                        el.setAttribute(attr.name, attr.value);\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        });\n    }\n    _log.t(this.componentId, 'model:view', 'timer:mv:stop');\n    return this;\n};\n\nmodule.exports = ComponentContext;","ctx":{"type":"method","constructor":"ComponentContext","cons":"ComponentContext","name":"modelToView","string":"ComponentContext.prototype.modelToView()"}}]