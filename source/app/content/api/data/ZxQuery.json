[{"tags":[],"description":{"full":"Copyright 2015-2018 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","summary":"Copyright 2015-2018 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix","body":"Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":17},{"tags":[{"type":"author","string":"Generoso Martello <generoso@martello.com>"}],"description":{"full":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","summary":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":18,"codeStart":27,"code":"'use strict';\n\nconst _log =\n    require('./Logger')('TaskQueue.js');\nconst util = require('./Util.js');\n\n\n// Types definitions for JsDoc","ctx":false},{"tags":[{"type":"typedef","string":"{object} ElementPosition","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{number} x X coordinate of the element in the viewport.","name":"x","description":"X coordinate of the element in the viewport.","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{number} y Y coordinate of the element in the viewport.","name":"y","description":"Y coordinate of the element in the viewport.","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean} visible Boolean value indicating whether the element is visible in the viewport.","name":"visible","description":"Boolean value indicating whether the element is visible in the viewport.","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"The `ElementPosition` object returned by the `position()` method.","summary":"The `ElementPosition` object returned by the `position()` method.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":36,"codeStart":44},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"callback","string":"IterationCallback"},{"type":"param","string":"{number} i Iteration count.","name":"i","description":"Iteration count.","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} item Current element.","name":"item","description":"Current element.","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"this","string":"{object}"}],"description":{"full":"The `IterationCallback` function.","summary":"The `IterationCallback` function.","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":45,"codeStart":54},{"tags":[{"type":"callback","string":"ElementsIterationCallback"},{"type":"param","string":"{number} count Iteration count.","name":"count","description":"Iteration count.","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Element} item Current element.","name":"item","description":"Current element.","types":["Element"],"typesDescription":"<code>Element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"this","string":"{ZxQuery}"}],"description":{"full":"Callback function used with the `each(..)` method.","summary":"Callback function used with the `each(..)` method.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":55,"codeStart":63},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":64,"codeStart":65,"code":"let supportsPassive = util.hasPassiveEvents();","ctx":{"type":"declaration","name":"supportsPassive","value":"util.hasPassiveEvents()","string":"supportsPassive"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":67,"codeStart":68,"code":"const _zuix_events_mapping = [];\nfunction routeEvent(e) {\n    triggerEventHandlers(this, e.type, e);\n}\nfunction addEventHandler(el, path, handler, options) {\n    let found = false;\n    z$.each(_zuix_events_mapping, function() {\n        if (this.element === el && this.path === path && this.handler === handler) {\n            _log.w('Handler already registered', el, path, handler);\n            found = true;\n            return false;\n        }\n    });\n    if (!found) {\n        _zuix_events_mapping.push({element: el, path: path, handler: handler, opgions: options});\n        el.addEventListener(path, routeEvent, supportsPassive && (options == null || options.passive !== false) ? {passive: true} : false);\n    }\n}\nfunction removeEventHandler(el, path, handler) {\n    let left = 1;\n    let index = -1;\n    z$.each(_zuix_events_mapping, function(i) {\n        if (this.element === el && this.path === path && this.handler === handler) {\n            left--;\n            index = i;\n        }\n    });\n    if (index !== -1) {\n        _zuix_events_mapping.splice(index, 1);\n    }\n    // unregister event handler since it was the last one\n    if (left === 0) {\n        el.removeEventListener(path, routeEvent);\n    }\n}\nfunction triggerEventHandlers(el, path, evt) {\n    const element = z$(el);\n    z$.each(_zuix_events_mapping, function() {\n        if (this.element === el && this.path === path) {\n            this.handler.call(element, evt);\n        }\n    });\n}\nfunction removeAllEventHandlers(el) {\n    z$.each(_zuix_events_mapping, function() {\n        if (this.element === el) {\n            _log.t('Removing event handler', this.element, this.path, this.handler);\n            removeEventHandler(this.element, this.path, this.handler);\n        }\n    });\n}","ctx":{"type":"declaration","name":"_zuix_events_mapping","value":"[]","string":"_zuix_events_mapping"}},{"tags":[{"type":"class","string":"ZxQuery"},{"type":"param","string":"{Object|ZxQuery|Array<Node>|Node|NodeList|string|undefined} [element] Element or list of elements to include in the ZxQuery object.","name":"[element]","description":"Element or list of elements to include in the ZxQuery object.","types":["Object","ZxQuery","Array.<Node>","Node","NodeList","string"],"typesDescription":"<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>|<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object containing the given element(s).","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object containing the given element(s)."},{"type":"constructor","string":""}],"description":{"full":"ZxQuery, a very lite subset of jQuery-like functions\ninternally used in Zuix for DOM operations.\n\nThe constructor takes one optional argument that can be\na DOM element, a node list or a valid DOM query selector string expression.\nIf no parameter is given, the resulting ZxQuery object will wrap the\nroot *document* element.","summary":"ZxQuery, a very lite subset of jQuery-like functions\ninternally used in Zuix for DOM operations.","body":"The constructor takes one optional argument that can be\na DOM element, a node list or a valid DOM query selector string expression.\nIf no parameter is given, the resulting ZxQuery object will wrap the\nroot *document* element."},"isPrivate":false,"isConstructor":true,"isClass":true,"isEvent":false,"ignore":false,"line":120,"codeStart":134,"code":"function ZxQuery(element) {","ctx":{"type":"constructor","name":"ZxQuery","string":"ZxQuery()"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":135,"codeStart":136,"code":"this._selection = [];\n\nif (typeof element === 'undefined') {\n    element = document.documentElement;\n}\n\nif (element instanceof ZxQuery) {\n    return element;\n} else if (element instanceof HTMLCollection || element instanceof NodeList) {\n    const list = this._selection = [];\n    z$.each(element, function(i, el) {\n        list.push(el);\n    });\n} else if (Array.isArray(element)) {\n    this._selection = element;\n} else if (element === window || element instanceof HTMLElement || element instanceof Node) {\n    this._selection = [element];\n} else if (typeof element === 'string') {\n    this._selection = document.documentElement.querySelectorAll(element);\n} else if (element !== null) { // if (typeof element === 'string') {\n    _log.e('ZxQuery cannot wrap object of this type.', (typeof element), element);\n    throw new Error('ZxQuery cannot wrap object of this type.');\n}\nreturn this;\n}","ctx":{"type":"property","receiver":"this","name":"_selection","value":"[]","string":"this._selection"}},{"tags":[{"type":"return","string":"{Number} Number of DOM elements.","types":["Number"],"typesDescription":"<code>Number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"Number of DOM elements."}],"description":{"full":"Gets the number of elements in the ZxQuery object.","summary":"Gets the number of elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":163,"codeStart":168,"code":"ZxQuery.prototype.length = function() {\n    return this._selection.length;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"length","string":"ZxQuery.prototype.length()"}},{"tags":[{"type":"param","string":"{string} [filter] A valid DOM query selector filter (**default:** *first parent*).","name":"[filter]","description":"A valid DOM query selector filter (**default:** *first parent*).","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} A new *ZxQuery* object containing the matching parent element.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"A new *ZxQuery* object containing the matching parent element."}],"description":{"full":"Gets the closest parent matching the given selector filter.\nThis only applies to the first element in the ZxQuery object.","summary":"Gets the closest parent matching the given selector filter.\nThis only applies to the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":171,"codeStart":178,"code":"ZxQuery.prototype.parent = function(filter) {\n    if (!util.isNoU(filter)) {\n        return new ZxQuery(z$.getClosest(this._selection[0], filter));\n    }\n    return new ZxQuery(this._selection[0].parentNode);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"parent","string":"ZxQuery.prototype.parent()"}},{"tags":[{"type":"param","string":"{string} [filter] A valid DOM query selector filter (**default:** *all children*).","name":"[filter]","description":"A valid DOM query selector filter (**default:** *all children*).","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery}  A new *ZxQuery* object containing the selected *children*.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"A new *ZxQuery* object containing the selected *children*."}],"description":{"full":"Gets the children matching the given selector filter.\nThis only applies to the first element in the ZxQuery object.","summary":"Gets the children matching the given selector filter.\nThis only applies to the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":184,"codeStart":191,"code":"ZxQuery.prototype.children = function(filter) {\n    // TODO: implement filtering\n    if (!util.isNoU(filter)) {\n        return new ZxQuery(this._selection[0].querySelectorAll(filter));\n    }\n    return new ZxQuery(this._selection[0].children);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"children","string":"ZxQuery.prototype.children()"}},{"tags":[{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Reverses order of the elements in the current set.","summary":"Reverses order of the elements in the current set.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":198,"codeStart":203,"code":"ZxQuery.prototype.reverse = function() {\n    const elements = (Array.prototype.slice).call(this._selection, 0);\n    this._selection = elements.reverse();\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"reverse","string":"ZxQuery.prototype.reverse()"}},{"tags":[{"type":"param","string":"{number} [i] Position of element (**default:** 0).","name":"[i]","description":"Position of element (**default:** 0).","types":["number"],"typesDescription":"<code>number</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Node|Element} The *DOM* element.","types":["Node","Element"],"typesDescription":"<code>Node</code>|<code>Element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *DOM* element."}],"description":{"full":"Gets the DOM Element located at the given position in the ZxQuery object.\nIf no index is provided, the default element will be returned.","summary":"Gets the DOM Element located at the given position in the ZxQuery object.\nIf no index is provided, the default element will be returned.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":208,"codeStart":215,"code":"ZxQuery.prototype.get = function(i) {\n    if (util.isNoU(i)) i = 0;\n    return this._selection[i];\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"get","string":"ZxQuery.prototype.get()"}},{"tags":[{"type":"param","string":"{number} i Position of element.","name":"i","description":"Position of element.","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} A new *ZxQuery* object containing the selected element.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"A new *ZxQuery* object containing the selected element."}],"description":{"full":"Gets a new ZxQuery object containing the element\nlocated at the given position in the current ZxQuery object.","summary":"Gets a new ZxQuery object containing the element\nlocated at the given position in the current ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":219,"codeStart":226,"code":"ZxQuery.prototype.eq = function(i) {\n    const selection = this._selection;\n    let resultSet = selection[i];\n    if (arguments.length > 1) {\n        resultSet = [];\n        z$.each(arguments, function(k, v) {\n            if (selection[v] != null) {\n                resultSet.push(selection[v]);\n            }\n        });\n    }\n    return new ZxQuery(resultSet);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"eq","string":"ZxQuery.prototype.eq()"}},{"tags":[{"type":"param","string":"{string} selector A valid *DOM* query selector.","name":"selector","description":"A valid *DOM* query selector.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} A new *ZxQuery* object containing the selected elements.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"A new *ZxQuery* object containing the selected elements."}],"description":{"full":"Selects all descendants matching the given *DOM* query selector filter.\nThis only applies to the first element in the ZxQuery object.","summary":"Selects all descendants matching the given *DOM* query selector filter.\nThis only applies to the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":239,"codeStart":246,"code":"ZxQuery.prototype.find = function(selector) {\n    return new ZxQuery(this._selection[0].querySelectorAll(selector));\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"find","string":"ZxQuery.prototype.find()"}},{"tags":[{"type":"param","string":"{ElementsIterationCallback} iterationCallback The callback function to call for each element in the ZxQuery object.","name":"iterationCallback","description":"The callback function to call for each element in the ZxQuery object.","types":["ElementsIterationCallback"],"typesDescription":"<a href=\"ElementsIterationCallback.html\">ElementsIterationCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Iterates through all *DOM* elements in the selection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)` function, will be the\n*DOM* element corresponding the current iteration.\n`index` will be the iteration count, and `item`\nthe current Element. The function context `this` will be a\n`{ZxQuery}` instance containing the current `item`.\nTo interrupt the iteration loop, return `false` in the callback\nfunction or return `true` to continue to the next iteration.","summary":"Iterates through all *DOM* elements in the selection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)` function, will be the\n*DOM* element corresponding the current iteration.\n`index` will be the iteration count, and `item`\nthe current Element. The function context `this` will be a\n`{ZxQuery}` instance containing the current `item`.\nTo interrupt the iteration loop, return `false` in the callback\nfunction or return `true` to continue to the next iteration.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":249,"codeStart":263,"code":"ZxQuery.prototype.each = function(iterationCallback) {\n    z$.each(this._selection, iterationCallback);\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"each","string":"ZxQuery.prototype.each()"}},{"tags":[{"type":"param","string":"{string|JSON} attr The attribute name.","name":"attr","description":"The attribute name.","types":["string","JSON"],"typesDescription":"<code>string</code>|<a href=\"JSON.html\">JSON</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string|undefined} [val] The attribute value.","name":"[val]","description":"The attribute value.","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{string|ZxQuery} The *attr* attribute value when no *val* specified, otherwise the *ZxQuery* object itself.","types":["string","ZxQuery"],"typesDescription":"<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *attr* attribute value when no *val* specified, otherwise the *ZxQuery* object itself."}],"description":{"full":"Gets the value of an attribute for the first element in the ZxQuery object,\nor sets one or more attributes for all elements in the ZxQuery object.","summary":"Gets the value of an attribute for the first element in the ZxQuery object,\nor sets one or more attributes for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":267,"codeStart":275,"code":"ZxQuery.prototype.attr = function(attr, val) {\n    const _t = this;\n    if (typeof attr === 'object') {\n        z$.each(attr, function(i, v) {\n            _t.each(function(k, el) {\n                el.setAttribute(i, v);\n            });\n        });\n    } else if (typeof val == 'undefined') {\n        return this._selection[0].getAttribute(attr);\n    } else if (val === null) {\n        this._selection[0].removeAttribute(attr);\n    } else {\n        this.each(function(k, v) {\n            this.get().setAttribute(attr, val);\n        });\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"attr","string":"ZxQuery.prototype.attr()"}},{"tags":[{"type":"param","string":"{string} eventPath Path of the event to trigger.","name":"eventPath","description":"Path of the event to trigger.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} eventData Value of the event.","name":"eventData","description":"Value of the event.","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Triggers the given event for all elements in the ZxQuery object.","summary":"Triggers the given event for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":294,"codeStart":301,"code":"ZxQuery.prototype.trigger = function(eventPath, eventData) {\n    let event;\n    if (window.CustomEvent) {\n        event = new CustomEvent(eventPath, {detail: eventData});\n    } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventPath, true, true, eventData);\n    }\n    this.each(function(k, el) {\n        el.dispatchEvent(event);\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"trigger","string":"ZxQuery.prototype.trigger()"}},{"tags":[{"type":"param","string":"{string} eventPath Event path.","name":"eventPath","description":"Event path.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} eventHandler Event handler.","name":"eventHandler","description":"Event handler.","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Listens once to the given event for all elements in the ZxQuery object.","summary":"Listens once to the given event for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":314,"codeStart":321,"code":"ZxQuery.prototype.one = function(eventPath, eventHandler) {\n    let fired = false;\n    this.on(eventPath, function(a, b) {\n        if (fired) return;\n        fired = true;\n        z$(this).off(eventPath, eventHandler);\n        (eventHandler).call(this, a, b);\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"one","string":"ZxQuery.prototype.one()"}},{"tags":[{"type":"param","string":"{string} eventPath Event path.","name":"eventPath","description":"Event path.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} eventHandler Event handler.","name":"eventHandler","description":"Event handler.","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Listens to the given event for all elements in the ZxQuery object.","summary":"Listens to the given event for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":331,"codeStart":338,"code":"ZxQuery.prototype.on = function(eventPath, eventHandler) {\n    const events = eventPath.match(/\\S+/g) || [];\n    let options;\n    if (typeof eventHandler !== 'function') {\n        options = eventHandler;\n        eventHandler = options.handler;\n    }\n    this.each(function(k, el) {\n        z$.each(events, function(k, ev) {\n            addEventHandler(el, ev, eventHandler, options);\n        });\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"on","string":"ZxQuery.prototype.on()"}},{"tags":[{"type":"param","string":"{string} eventPath Event path.","name":"eventPath","description":"Event path.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} eventHandler Event handler.","name":"eventHandler","description":"Event handler.","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Stops listening for the given event.","summary":"Stops listening for the given event.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":352,"codeStart":358,"code":"ZxQuery.prototype.off = function(eventPath, eventHandler) {\n    const events = eventPath.match(/\\S+/g) || [];\n    this.each(function(k, el) {\n        z$.each(events, function(k, ev) {\n            removeEventHandler(el, ev, eventHandler);\n        });\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"off","string":"ZxQuery.prototype.off()"}},{"tags":[{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"De-register all event handlers of all elements in the ZxQuery object.","summary":"De-register all event handlers of all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":367,"codeStart":372,"code":"ZxQuery.prototype.reset = function() {\n    this.each(function(k, el) {\n        removeAllEventHandlers(el);\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"reset","string":"ZxQuery.prototype.reset()"}},{"tags":[{"type":"return","string":"{boolean} *true* if the element is empty, *false* otherwise.","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"*true* if the element is empty, *false* otherwise."}],"description":{"full":"Returns *true* if the first element markup code is empty.","summary":"Returns *true* if the first element markup code is empty.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":378,"codeStart":383,"code":"ZxQuery.prototype.isEmpty = function() {\n    return (this._selection[0].innerHTML.replace(/\\s/g, '').length === 0);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"isEmpty","string":"ZxQuery.prototype.isEmpty()"}},{"tags":[{"type":"return","string":"{ElementPosition}","types":["ElementPosition"],"typesDescription":"<a href=\"ElementPosition.html\">ElementPosition</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets coordinates and visibility status of the first element.","summary":"Gets coordinates and visibility status of the first element.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":386,"codeStart":391,"code":"ZxQuery.prototype.position = function() {\n    if (this._selection[0] != null) {\n        return z$.getPosition(this._selection[0]);\n    } else {\n        // TODO: check this out; should prevent this from happening\n        return {x: -1, y: -1, visible: false};\n    }\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"position","string":"ZxQuery.prototype.position()"}},{"tags":[{"type":"param","string":"{string|JSON} prop The CSS property name or JSON list of property/value pairs.","name":"prop","description":"The CSS property name or JSON list of property/value pairs.","types":["string","JSON"],"typesDescription":"<code>string</code>|<a href=\"JSON.html\">JSON</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string|undefined} [val] The CSS property value.","name":"[val]","description":"The CSS property value.","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{string|ZxQuery} The CSS property value when no *val* specified, otherwise the *ZxQuery* object itself.","types":["string","ZxQuery"],"typesDescription":"<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The CSS property value when no *val* specified, otherwise the *ZxQuery* object itself."}],"description":{"full":"Gets the value of a CSS property for the first element in the ZxQuery object,\nor sets one or more CSS property for all elements in the ZxQuery object.","summary":"Gets the value of a CSS property for the first element in the ZxQuery object,\nor sets one or more CSS property for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":400,"codeStart":408,"code":"ZxQuery.prototype.css = function(prop, val) {\n    const _t = this;\n    if (typeof prop === 'object') {\n        z$.each(prop, function(i, v) {\n            _t.each(function(k, el) {\n                el.style[i] = v;\n            });\n        });\n    } else if (util.isNoU(val)) {\n        return this._selection[0].style[prop];\n    } else {\n        _t.each(function(k, el) {\n            el.style[prop] = val;\n        });\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"css","string":"ZxQuery.prototype.css()"}},{"tags":[{"type":"param","string":"{string} className The CSS class name.","name":"className","description":"The CSS class name.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Adds the given CSS class to the class list of all elements in the ZxQuery object.","summary":"Adds the given CSS class to the class list of all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":425,"codeStart":431,"code":"ZxQuery.prototype.addClass = function(className) {\n    const classes = className.match(/\\S+/g) || [];\n    z$.each(this._selection, function(k, el) {\n        if (el.classList) {\n            z$.each(classes, function(k, cl) {\n                el.classList.add(cl);\n            });\n        } else el.className += ' ' + className;\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"addClass","string":"ZxQuery.prototype.addClass()"}},{"tags":[{"type":"param","string":"{string} className The CSS class name.","name":"className","description":"The CSS class name.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{boolean} *true* if the element contains the given CSS class, *false* otherwise.","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"*true* if the element contains the given CSS class, *false* otherwise."}],"description":{"full":"Returns *true* if the first element in the ZxQuery object contains the given CSS class.","summary":"Returns *true* if the first element in the ZxQuery object contains the given CSS class.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":442,"codeStart":448,"code":"ZxQuery.prototype.hasClass = function(className) {\n    return z$.hasClass(this._selection[0], className);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"hasClass","string":"ZxQuery.prototype.hasClass()"}},{"tags":[{"type":"param","string":"{string} className The CSS class name.","name":"className","description":"The CSS class name.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Removes the given CSS class from all elements in the ZxQuery object.","summary":"Removes the given CSS class from all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":451,"codeStart":457,"code":"ZxQuery.prototype.removeClass = function(className) {\n    const classes = className.match(/\\S+/g) || [];\n    z$.each(this._selection, function(k, el) {\n        if (el.classList) {\n            z$.each(classes, function(k, cl) {\n                el.classList.remove(cl);\n            });\n        } else el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"removeClass","string":"ZxQuery.prototype.removeClass()"}},{"tags":[{"type":"return","string":"{ZxQuery} A new *ZxQuery* object containing the previous sibling element.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"A new *ZxQuery* object containing the previous sibling element."}],"description":{"full":"Moves to the previous sibling in the DOM.\nThis only applies to the first element in the ZxQuery object.","summary":"Moves to the previous sibling in the DOM.\nThis only applies to the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":468,"codeStart":474,"code":"ZxQuery.prototype.prev = function() {\n    return new ZxQuery(this._selection[0].previousElementSibling);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"prev","string":"ZxQuery.prototype.prev()"}},{"tags":[{"type":"return","string":"{ZxQuery} A new *ZxQuery* object containing the next sibling element.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"A new *ZxQuery* object containing the next sibling element."}],"description":{"full":"Moves to the next sibling in the DOM.\nThis only applies to the first element in the ZxQuery object.","summary":"Moves to the next sibling in the DOM.\nThis only applies to the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":477,"codeStart":483,"code":"ZxQuery.prototype.next = function() {\n    return new ZxQuery(this._selection[0].nextElementSibling);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"next","string":"ZxQuery.prototype.next()"}},{"tags":[{"type":"param","string":"{string|undefined} [htmlText] HTML text.","name":"[htmlText]","description":"HTML text.","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery|string}","types":["ZxQuery","string"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets the HTML string of the first element in the ZxQuery object,\nor sets the HTML string for all elements in the ZxQuery object.","summary":"Gets the HTML string of the first element in the ZxQuery object,\nor sets the HTML string for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":486,"codeStart":493,"code":"ZxQuery.prototype.html = function(htmlText) {\n    if (util.isNoU(htmlText)) {\n        return this._selection[0].innerHTML;\n    }\n    this.each(function(k, el) {\n        el.innerHTML = htmlText;\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"html","string":"ZxQuery.prototype.html()"}},{"tags":[{"type":"param","string":"{boolean|undefined} [check] Value to assign to the 'checked' attribute.","name":"[check]","description":"Value to assign to the 'checked' attribute.","types":["boolean"],"typesDescription":"<code>boolean</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery|boolean}","types":["ZxQuery","boolean"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>|<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets the `checked` attribute of the first element in the ZxQuery object,\nor sets the `checked` attribute value for all elements in the ZxQuery object.","summary":"Gets the `checked` attribute of the first element in the ZxQuery object,\nor sets the `checked` attribute value for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":502,"codeStart":509,"code":"ZxQuery.prototype.checked = function(check) {\n    if (util.isNoU(check)) {\n        const checked = this._selection[0].checked;\n        return (checked != null && checked != 'false' && (checked || checked == 'checked'));\n    }\n    this.each(function(k, el) {\n        el.checked = check;\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"checked","string":"ZxQuery.prototype.checked()"}},{"tags":[{"type":"param","string":"{string|undefined} [value] Value to assign to the 'value' attribute.","name":"[value]","description":"Value to assign to the 'value' attribute.","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery|string}","types":["ZxQuery","string"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets the `value` attribute of the first element in the ZxQuery object,\nor sets the `value` attribute value for all elements in the ZxQuery object.","summary":"Gets the `value` attribute of the first element in the ZxQuery object,\nor sets the `value` attribute value for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":519,"codeStart":526,"code":"ZxQuery.prototype.value = function(value) {\n    if (util.isNoU(value)) {\n        return this._selection[0].value;\n    }\n    this.each(function(k, el) {\n        el.value = value;\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"value","string":"ZxQuery.prototype.value()"}},{"tags":[{"type":"param","string":"{Object|ZxQuery|Array<Node>|Node|NodeList|string} el Element or HTML to append.","name":"el","description":"Element or HTML to append.","types":["Object","ZxQuery","Array.<Node>","Node","NodeList","string"],"typesDescription":"<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Appends the given element or HTML string to the first element in the ZxQuery object.","summary":"Appends the given element or HTML string to the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":535,"codeStart":541,"code":"ZxQuery.prototype.append = function(el) {\n    if (typeof el === 'string') {\n        this._selection[0].innerHTML += el;\n    } else {\n        this._selection[0].appendChild(el);\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"append","string":"ZxQuery.prototype.append()"}},{"tags":[{"type":"param","string":"{number} index Position where to insert `el` Element.","name":"index","description":"Position where to insert `el` Element.","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object|ZxQuery|Array<Node>|Node|NodeList} el Element to insert.","name":"el","description":"Element to insert.","types":["Object","ZxQuery","Array.<Node>","Node","NodeList"],"typesDescription":"<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Inserts the given child element before the one located at the specified index\nto the first element in the ZxQuery object.","summary":"Inserts the given child element before the one located at the specified index\nto the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":549,"codeStart":557,"code":"ZxQuery.prototype.insert = function(index, el) {\n    const target = this.children().get(index);\n    if (target !== null) {\n        this._selection[0].insertBefore(el, target);\n    } else {\n        this._selection[0].appendChild(el);\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"insert","string":"ZxQuery.prototype.insert()"}},{"tags":[{"type":"param","string":"{Object|ZxQuery|Array<Node>|Node|NodeList|string} el Element to append.","name":"el","description":"Element to append.","types":["Object","ZxQuery","Array.<Node>","Node","NodeList","string"],"typesDescription":"<code>Object</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>Array</code>.&lt;<code>Node</code>&gt;|<code>Node</code>|<code>NodeList</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Prepends the given element or HTML string to the first element in the ZxQuery object.","summary":"Prepends the given element or HTML string to the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":566,"codeStart":572,"code":"ZxQuery.prototype.prepend = function(el) {\n    if (typeof el === 'string') {\n        this._selection[0].innerHTML = el + this._selection[0].innerHTML;\n    } else {\n        this._selection[0].insertBefore(el, this._selection[0].firstElementChild);\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"prepend","string":"ZxQuery.prototype.prepend()"}},{"tags":[{"type":"return","string":"{ZxQuery}","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Detach from its parent the first element in the ZxQuery object.","summary":"Detach from its parent the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":580,"codeStart":585,"code":"ZxQuery.prototype.detach = function() {\n    const el = this._selection[0];\n    const parent = el.parentNode;\n    if (parent != null) {\n        el.__zuix_oldParent = parent;\n        el.__zuix_oldIndex = Array.prototype.indexOf.call(parent.children, el);\n        parent.removeChild(el);\n        _log.t('Detached from parent', parent, el);\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"detach","string":"ZxQuery.prototype.detach()"}},{"tags":[{"type":"return","string":"{ZxQuery}","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Re-attach to its parent the first element in the ZxQuery object.","summary":"Re-attach to its parent the first element in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":596,"codeStart":601,"code":"ZxQuery.prototype.attach = function() {\n    const el = this._selection[0];\n    if (el.parentNode == null && el.__zuix_oldParent != null) {\n        z$(el.__zuix_oldParent).insert(el.__zuix_oldIndex, el);\n        el.__zuix_oldParent = null;\n        delete el.__zuix_oldParent;\n        delete el.__zuix_oldIndex;\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"attach","string":"ZxQuery.prototype.attach()"}},{"tags":[{"type":"param","string":"{string|undefined} [mode] The display value.","name":"[mode]","description":"The display value.","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{string|ZxQuery} The *display* value when no *mode* specified, otherwise the *ZxQuery* object itself.","types":["string","ZxQuery"],"typesDescription":"<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *display* value when no *mode* specified, otherwise the *ZxQuery* object itself."}],"description":{"full":"Gets the CSS `display` property of the first element in the ZxQuery object,\nor sets the `display` property value for all elements in the ZxQuery object.","summary":"Gets the CSS `display` property of the first element in the ZxQuery object,\nor sets the `display` property value for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":611,"codeStart":618,"code":"ZxQuery.prototype.display = function(mode) {\n    if (util.isNoU(mode)) {\n        return this._selection[0].style.display;\n    }\n    z$.each(this._selection, function(k, el) {\n        el.style.display = mode;\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"display","string":"ZxQuery.prototype.display()"}},{"tags":[{"type":"param","string":"{string|undefined} [mode] The visibility value.","name":"[mode]","description":"The visibility value.","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{string|ZxQuery} The *visibility* value when no *mode* specified, otherwise the *ZxQuery* object itself.","types":["string","ZxQuery"],"typesDescription":"<code>string</code>|<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *visibility* value when no *mode* specified, otherwise the *ZxQuery* object itself."}],"description":{"full":"Gets the CSS `visibility` property of the first element in the ZxQuery object,\nor sets the `visibility` property value for all elements in the ZxQuery object.","summary":"Gets the CSS `visibility` property of the first element in the ZxQuery object,\nor sets the `visibility` property value for all elements in the ZxQuery object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":627,"codeStart":634,"code":"ZxQuery.prototype.visibility = function(mode) {\n    if (util.isNoU(mode)) {\n        return this._selection[0].style.visibility;\n    }\n    z$.each(this._selection, function(k, el) {\n        el.style.visibility = mode;\n    });\n    return this;\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"visibility","string":"ZxQuery.prototype.visibility()"}},{"tags":[{"type":"param","string":"{string} [mode] Set the display mode to be used to show element (eg. block, inline, etc..).","name":"[mode]","description":"Set the display mode to be used to show element (eg. block, inline, etc..).","types":["string"],"typesDescription":"<code>string</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Sets the CSS `display` property to '' if no argument value is provided, otherwise set it to the given value.","summary":"Sets the CSS `display` property to '' if no argument value is provided, otherwise set it to the given value.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":643,"codeStart":649,"code":"ZxQuery.prototype.show = function(mode) {\n    return this.display(mode == null ? '' : mode);\n};","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"show","string":"ZxQuery.prototype.show()"}},{"tags":[{"type":"return","string":"{ZxQuery} The *ZxQuery* object itself.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The *ZxQuery* object itself."}],"description":{"full":"Sets the CSS `display` property to 'none'.","summary":"Sets the CSS `display` property to 'none'.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":652,"codeStart":657,"code":"ZxQuery.prototype.hide = function() {\n    return this.display('none');\n};\n\n// --- ZxQuery factory members --- //","ctx":{"type":"method","constructor":"ZxQuery","cons":"ZxQuery","name":"hide","string":"ZxQuery.prototype.hide()"}},{"tags":[{"type":"param","string":"[what] {Object|ZxQuery|Array<Node>|Node|NodeList|string|undefined}","name":"[what]","description":"{Object|ZxQuery|Array<Node>|Node|NodeList|string|undefined}","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false},{"type":"return","string":"{ZxQuery}","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Exported ZxQuery interface.","summary":"Exported ZxQuery interface.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":663,"codeStart":669,"code":"const z$ = function(what) {\n    return new ZxQuery(what);\n};\nz$.find = function(filter) {\n    return z$().find(filter);\n};","ctx":{"type":"function","name":"z$","string":"z$()"}},{"tags":[{"type":"param","string":"{Array<Object>|JSON} items Enumerable objects collection.","name":"items","description":"Enumerable objects collection.","types":["Array.<Object>","JSON"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>&gt;|<a href=\"JSON.html\">JSON</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{IterationCallback} iterationCallback The callback *fn* to call at each iteration","name":"iterationCallback","description":"The callback *fn* to call at each iteration","types":["IterationCallback"],"typesDescription":"<a href=\"IterationCallback.html\">IterationCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{z$} `this`.","types":["z$"],"typesDescription":"<a href=\"z%24.html\">z$</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"`this`."}],"description":{"full":"Iterate through all objects in the given `items` collection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)`, will be the\nobject corresponding the current iteration and\nthe `index` passed to the callback will be the iteration count.\n\nIf the callback returns *false*, the iteration loop will interrupt.","summary":"Iterate through all objects in the given `items` collection.\nThe context object *this*, passed to the\n*iterationCallback*`(index, item)`, will be the\nobject corresponding the current iteration and\nthe `index` passed to the callback will be the iteration count.","body":"If the callback returns *false*, the iteration loop will interrupt."},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":675,"codeStart":688,"code":"z$.each = function(items, iterationCallback) {\n    const len = (items == null ? 0 : Object.keys(items).length);\n    if (len > 0) {\n        let count = 0;\n        for (let i in items) {\n            if (items.hasOwnProperty(i)) {\n                let item = items[i];\n                if (item instanceof Element) {\n                    item = z$(item);\n                }\n                if (iterationCallback.call(item, i, items[i]) === false) {\n                    break;\n                }\n                count++;\n                if (count >= len) {\n                    break;\n                }\n            }\n        }\n    }\n    return this;\n};\nz$.ajax = function(opt) {\n    let url;\n    if (!util.isNoU(opt) && !util.isNoU(opt.url)) {\n        url = opt.url;\n    } else {\n        url = opt;\n    }\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.onload = function() {\n        if (xhr.status === 200) {\n            if (util.isFunction(opt.success)) opt.success(xhr.responseText);\n        } else {\n            if (util.isFunction(opt.error)) opt.error(xhr);\n        }\n        if (util.isFunction(opt.then)) opt.then(xhr);\n    };\n    xhr.send();\n    return this;\n};\nz$.hasClass = function(el, className) {\n    const classes = className.match(/\\S+/g) || [];\n    let success = false;\n    z$.each(classes, function(k, cl) {\n        if (el.classList) {\n            success = el.classList.contains(cl);\n        } else {\n            success = (new RegExp('(^| )' + cl + '( |$)', 'gi').test(el.className));\n        }\n        if (success) return false;\n    });\n    return success;\n};\nz$.classExists = function(className) {\n    const classes = className.match(/\\S+/g) || [];\n    let success = false;\n    z$.each(classes, function(k, cl) {\n        // Perform global style check\n        const docStyles = document.styleSheets;\n        if (docStyles != null) {\n            for (let sx = 0; sx < docStyles.length; sx++) {\n                // the try statement is needed because on Firefox accessing CSS rules\n                // loaded from a remote source will raise a security exception\n                try {\n                    const classes = docStyles[sx].rules || docStyles[sx].cssRules;\n                    if (classes != null) {\n                        for (let cx = 0; cx < classes.length; cx++) {\n                            if (classes[cx].selectorText === cl) {\n                                success = true;\n                                break;\n                            }\n                        }\n                    }\n                } catch (e) {\n                    if (e.name !== 'SecurityError' && e.name !== 'InvalidAccessError') {\n                        throw e;\n                    }\n                }\n            }\n        }\n    });\n    return success;\n};\nz$.wrapElement = function(containerTag, element) {\n    // $(element).wrap($('<'+containerTag+'/>'));\n    // return element;","ctx":{"type":"method","receiver":"z$","name":"each","string":"z$.each()"}},{"tags":[{"type":"type","string":"Element","types":["lemen"],"typesDescription":"<a href=\"lemen.html\">lemen</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":776,"codeStart":777,"code":"const container = document.createElement(containerTag);\nif (typeof element === 'string') {\n    container.innerHTML = element;\n} else {\n    // TODO: test this, it may not work\n    container.appendChild(element);\n}\nreturn container;\n};\nz$.wrapCss = function(wrapperRule, css) {\nconst wrapReX = /(([a-zA-Z0-9\\240-\\377=:-_\\n,.@]+.*){([^{}]|((.*){([^}]+)[}]))*})/g;\nlet wrappedCss = '';\nlet ruleMatch;\n// remove comments\ncss = css.replace(/\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/g, '');\ndo {\n    ruleMatch = wrapReX.exec(css);\n    if (ruleMatch && ruleMatch.length > 1) {\n        let ruleParts = ruleMatch[2];\n        if (ruleParts != null && ruleParts.length > 0) {\n            ruleParts = ruleParts.replace(/\\n/g, '');\n            const classes = ruleParts.split(',');\n            let isMediaQuery = false;\n            z$.each(classes, function(k, v) {\n                if (v.replace(' ', '') === '.') {\n                    // a single `.` means 'self' (the container itself)\n                    // so we just add the wrapperRule\n                    wrappedCss += '\\n' + wrapperRule + ' ';\n                } else if (v.trim()[0] === '@') {\n                    // leave it as is if it's an animation or media rule\n                    wrappedCss += v + ' ';\n                    if (v.trim().toLowerCase().startsWith('@media')) {\n                        isMediaQuery = true;\n                    }\n                } else {\n                    // wrap the class name (v)\n                    wrappedCss += '\\n' + wrapperRule + '\\n' + v + ' ';\n                }\n                if (k < classes.length - 1) {\n                    wrappedCss += ', ';\n                }\n            });\n            if (isMediaQuery) {\n                const wrappedMediaQuery = z$.wrapCss(wrapperRule, ruleMatch[1].substring(ruleMatch[2].length).replace(/^{([^\\0]*?)}$/, '$1'));\n                wrappedCss += '{\\n  '+wrappedMediaQuery+'\\n}';\n            } else {\n                wrappedCss += ruleMatch[1].substring(ruleMatch[2].length) + '\\n';\n            }\n        } else {\n            _log.w('z$.wrapCss was unable to parse rule.', ruleParts, ruleMatch);\n        }\n    }\n} while (ruleMatch);\nif (wrappedCss !== '') {\n    css = wrappedCss;\n}\nreturn css;\n};\nz$.appendCss = function(css, target, cssId) {\nconst head = document.head || document.getElementsByTagName('head')[0];\nlet style = null;\n// remove old style if already defined\nif (!util.isNoU(target)) {\n    head.removeChild(target);\n} else {\n    const oldStyle = document.getElementById(cssId);\n    if (oldStyle != null) {\n        head.removeChild(oldStyle);\n    }\n}\nif (typeof css === 'string') {\n    // output css\n    style = document.createElement('style');\n    style.type = 'text/css';\n    style.id = cssId;\n    if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        style.appendChild(document.createTextNode(css));\n    }\n} else if (css instanceof Element) style = css;\n// Append new CSS\nif (!util.isNoU(style)) {\n    head.appendChild(style);\n}\nreturn style;\n};\nz$.replaceCssVars = function(css, model) {\nconst vars = new RegExp(/\\B\\$var\\[(.*[^\\[\\]])]/g);\nlet outCss = '';\nlet matched = 0;\nlet currentIndex = 0;\nlet result;\nwhile (result = vars.exec(css)) {\n    let value = result[0];\n    if (result.length > 1) {\n        const name = result[1];\n        // resolve dotted field path\n        let cur = model;\n        if (name.indexOf('.') > 0) {\n            const path = name.split('.');\n            for (let p = 0; p < path.length - 1; p++) {\n                cur = cur[path[p]];\n                if (typeof cur === 'undefined') {\n                    break;\n                }\n            }\n            if (typeof cur !== 'undefined') {\n                value = cur[path[path.length - 1]];\n                matched++;\n            }\n        } else if (typeof cur[name] !== 'undefined') {\n            value = cur[name];\n            matched++;\n        }\n    }\n    outCss += css.substr(currentIndex, result.index-currentIndex)+value;\n    currentIndex = result.index+result[0].length;\n}\nif (matched > 0) {\n    outCss += css.substr(currentIndex);\n    css = outCss;\n}\nreturn css;\n};\nz$.replaceBraces = function(html, callback) {\n// TODO: add optional parameter for custom regex\nconst tags = new RegExp(/{?{.*?}?}/g); // <-- single/double braces wrapper\nlet outHtml = '';\nlet matched = 0;\nlet currentIndex = 0;\nlet result;\nwhile (result = tags.exec(html)) {\n    if (typeof result[0] === 'string' && (result[0].trim().length === 0 || result[0].indexOf('\\n') >= 0)) {\n        const nv = html.substr(currentIndex, result.index-currentIndex)+result[0];\n        outHtml += nv;\n        currentIndex += nv.length;\n        continue;\n    }\n    let value = result[0];\n    if (typeof callback === 'function') {\n        const r = callback(result[0]);\n        if (!util.isNoU(r)) {\n            value = r;\n            matched++;\n        }\n    }\n    outHtml += html.substr(currentIndex, result.index-currentIndex)+value;\n    currentIndex = result.index+result[0].length;\n}\nif (matched > 0) {\n    outHtml += html.substr(currentIndex);\n    return outHtml;\n}\nreturn null;\n};\nz$.getClosest = function(elem, selector) {\n// Get closest match\nfor (; elem && elem !== document; elem = elem.parentNode) {\n    if (elem.matches(selector)) return elem;\n}\nreturn null;\n};\nz$.getPosition = function(el, tolerance) {\nconst visibleClass = '--ui--visible';\nconst position = (function() {\n    let x = 0;\n    let y = 0;\n    let rect = el.getBoundingClientRect();\n    let parent = el;\n    while (parent) {\n        if (parent.tagName.toLowerCase() === 'body') {\n            // deal with browser quirks with body/window/document and page scroll\n            const scrollX = parent.scrollLeft || document.documentElement.scrollLeft;\n            const scrollY = parent.scrollTop || document.documentElement.scrollTop;\n            x += (parent.offsetLeft - scrollX + parent.clientLeft);\n            y += (parent.offsetTop - scrollY + parent.clientTop);\n        } else {\n            // for all other non-BODY elements\n            x += (parent.offsetLeft - parent.scrollLeft + parent.clientLeft);\n            y += (parent.offsetTop - parent.scrollTop + parent.clientTop);\n        }\n        parent = parent.offsetParent;\n    }\n    return {\n        x: x,\n        y: y,\n        rect: rect\n    };\n})(el);\nposition.visible = false;\nlet scrollable = el.offsetParent;\nif (scrollable != null) {\n    if (scrollable !== document.body) {\n        // find the scrollable container\n        let s = scrollable.offsetParent;\n        while (s != null && s.offsetParent !== null && s.offsetHeight === s.scrollHeight) {\n            s = s.offsetParent;\n        }\n        if (s != null) scrollable = s;\n    }\n    let r1 = scrollable.getBoundingClientRect();\n    if (scrollable === document.body) {\n        // modify from read-only object\n        r1 = {\n            x: r1.x,\n            y: r1.y,\n            width: document.documentElement.offsetWidth || document.documentElement.clientWidth,\n            height: document.documentElement.offsetHeight || document.documentElement.clientHeight,\n            top: 0,\n            left: 0,\n            right: document.documentElement.clientWidth || document.documentElement.offsetWidth,\n            bottom: document.documentElement.clientHeight || document.documentElement.offsetHeight\n        };\n    }\n    if (tolerance == null) tolerance = 0;\n    const r2 = el.getBoundingClientRect();\n    // visible status\n    const visible = !(r2.left-1 > r1.right - tolerance ||\n        r2.right+1 < r1.left + tolerance ||\n        r2.top-1 > r1.bottom - tolerance ||\n        r2.bottom+1 < r1.top + tolerance);\n    position.visible = visible;\n    // viewport-relative frame position\n    position.frame = {\n        dx: (r2.left + (r2.width / 2) - r1.left) / r1.width,\n        dy: (r2.top + (r2.height / 2) - r1.top) / r1.height\n    };\n    // update status event and and/remove 'visibleClass'\n    el = z$(el);\n    if (!visible && el.hasClass(visibleClass)) {\n        el.removeClass(visibleClass);\n        position.event = 'exit';\n    } else if (!visible) {\n        position.event = 'off-scroll';\n    } else if (visible) {\n        if (!el.hasClass(visibleClass)) {\n            position.event = 'enter';\n            el.addClass(visibleClass);\n        } else position.event = 'scroll';\n    }\n}\nreturn position;\n};\n\nz$.ZxQuery = ZxQuery;\n\n// Element.matches() polyfill\nif (!Element.prototype.matches) {\nElement.prototype.matches =\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector ||\n    function(s) {\n        const matches = (this.document || this.ownerDocument).querySelectorAll(s);\n        let i = matches.length;\n        while (--i >= 0 && matches.item(i) !== this) {\n        }\n        return i > -1;\n    };\n}\n// window.CustomEvent polyfill for IE>=9\n(function() {\nif (typeof window.CustomEvent === 'function') return false;\nfunction CustomEvent(event, params) {\n    params = params || {bubbles: false, cancelable: false, detail: undefined};\n    const evt = document.createEvent( 'CustomEvent' );\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n    return evt;\n}\nCustomEvent.prototype = window.Event.prototype;\nwindow.CustomEvent = CustomEvent;\n})();\n// String.hashCode extension\nString.prototype.hashCode = function() {\nlet hash = 0;\nif (this.length === 0) return hash;\nfor (let i = 0; i < this.length; i++) {\n    let chr = this.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n}\nreturn hash;\n};\n// String.startsWith polyfill\nif (!String.prototype.startsWith) {\nString.prototype.startsWith = function(search, pos) {\n    return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n};\n}\n\nmodule.exports = z$;","ctx":{"type":"declaration","name":"container","value":"document.createElement(containerTag)","string":"container"}}]